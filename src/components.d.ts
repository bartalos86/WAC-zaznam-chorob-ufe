/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface Cv1ZaznamChorobApp {
        "ambulanceId": string;
        "apiBase": string;
        "basePath": string;
    }
    interface PatientApp {
        "apiBase": string;
        "basePath": string;
    }
    interface PatientList {
    }
    interface RandomPatient {
    }
}
export interface PatientListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPatientListElement;
}
export interface RandomPatientCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRandomPatientElement;
}
declare global {
    interface HTMLCv1ZaznamChorobAppElement extends Components.Cv1ZaznamChorobApp, HTMLStencilElement {
    }
    var HTMLCv1ZaznamChorobAppElement: {
        prototype: HTMLCv1ZaznamChorobAppElement;
        new (): HTMLCv1ZaznamChorobAppElement;
    };
    interface HTMLPatientAppElement extends Components.PatientApp, HTMLStencilElement {
    }
    var HTMLPatientAppElement: {
        prototype: HTMLPatientAppElement;
        new (): HTMLPatientAppElement;
    };
    interface HTMLPatientListElementEventMap {
        "entry-clicked": string;
    }
    interface HTMLPatientListElement extends Components.PatientList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPatientListElementEventMap>(type: K, listener: (this: HTMLPatientListElement, ev: PatientListCustomEvent<HTMLPatientListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPatientListElementEventMap>(type: K, listener: (this: HTMLPatientListElement, ev: PatientListCustomEvent<HTMLPatientListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPatientListElement: {
        prototype: HTMLPatientListElement;
        new (): HTMLPatientListElement;
    };
    interface HTMLRandomPatientElementEventMap {
        "entry-clicked": string;
    }
    interface HTMLRandomPatientElement extends Components.RandomPatient, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRandomPatientElementEventMap>(type: K, listener: (this: HTMLRandomPatientElement, ev: RandomPatientCustomEvent<HTMLRandomPatientElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRandomPatientElementEventMap>(type: K, listener: (this: HTMLRandomPatientElement, ev: RandomPatientCustomEvent<HTMLRandomPatientElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRandomPatientElement: {
        prototype: HTMLRandomPatientElement;
        new (): HTMLRandomPatientElement;
    };
    interface HTMLElementTagNameMap {
        "cv1-zaznam-chorob-app": HTMLCv1ZaznamChorobAppElement;
        "patient-app": HTMLPatientAppElement;
        "patient-list": HTMLPatientListElement;
        "random-patient": HTMLRandomPatientElement;
    }
}
declare namespace LocalJSX {
    interface Cv1ZaznamChorobApp {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "basePath"?: string;
    }
    interface PatientApp {
        "apiBase"?: string;
        "basePath"?: string;
    }
    interface PatientList {
        "onEntry-clicked"?: (event: PatientListCustomEvent<string>) => void;
    }
    interface RandomPatient {
        "onEntry-clicked"?: (event: RandomPatientCustomEvent<string>) => void;
    }
    interface IntrinsicElements {
        "cv1-zaznam-chorob-app": Cv1ZaznamChorobApp;
        "patient-app": PatientApp;
        "patient-list": PatientList;
        "random-patient": RandomPatient;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "cv1-zaznam-chorob-app": LocalJSX.Cv1ZaznamChorobApp & JSXBase.HTMLAttributes<HTMLCv1ZaznamChorobAppElement>;
            "patient-app": LocalJSX.PatientApp & JSXBase.HTMLAttributes<HTMLPatientAppElement>;
            "patient-list": LocalJSX.PatientList & JSXBase.HTMLAttributes<HTMLPatientListElement>;
            "random-patient": LocalJSX.RandomPatient & JSXBase.HTMLAttributes<HTMLRandomPatientElement>;
        }
    }
}
