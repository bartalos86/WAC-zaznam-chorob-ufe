/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface BmAmbulanceWlEditor {
        "ambulanceId": string;
        "apiBase": string;
        "entryId": string;
    }
    interface BmAmbulanceWlList {
        "ambulanceId": string;
        "apiBase": string;
    }
    interface Cv1ZaznamChorobApp {
        "ambulanceId": string;
        "apiBase": string;
        "basePath": string;
    }
}
export interface BmAmbulanceWlEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBmAmbulanceWlEditorElement;
}
export interface BmAmbulanceWlListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBmAmbulanceWlListElement;
}
declare global {
    interface HTMLBmAmbulanceWlEditorElementEventMap {
        "editor-closed": string;
    }
    interface HTMLBmAmbulanceWlEditorElement extends Components.BmAmbulanceWlEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLBmAmbulanceWlEditorElementEventMap>(type: K, listener: (this: HTMLBmAmbulanceWlEditorElement, ev: BmAmbulanceWlEditorCustomEvent<HTMLBmAmbulanceWlEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLBmAmbulanceWlEditorElementEventMap>(type: K, listener: (this: HTMLBmAmbulanceWlEditorElement, ev: BmAmbulanceWlEditorCustomEvent<HTMLBmAmbulanceWlEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLBmAmbulanceWlEditorElement: {
        prototype: HTMLBmAmbulanceWlEditorElement;
        new (): HTMLBmAmbulanceWlEditorElement;
    };
    interface HTMLBmAmbulanceWlListElementEventMap {
        "entry-clicked": string;
    }
    interface HTMLBmAmbulanceWlListElement extends Components.BmAmbulanceWlList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLBmAmbulanceWlListElementEventMap>(type: K, listener: (this: HTMLBmAmbulanceWlListElement, ev: BmAmbulanceWlListCustomEvent<HTMLBmAmbulanceWlListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLBmAmbulanceWlListElementEventMap>(type: K, listener: (this: HTMLBmAmbulanceWlListElement, ev: BmAmbulanceWlListCustomEvent<HTMLBmAmbulanceWlListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLBmAmbulanceWlListElement: {
        prototype: HTMLBmAmbulanceWlListElement;
        new (): HTMLBmAmbulanceWlListElement;
    };
    interface HTMLCv1ZaznamChorobAppElement extends Components.Cv1ZaznamChorobApp, HTMLStencilElement {
    }
    var HTMLCv1ZaznamChorobAppElement: {
        prototype: HTMLCv1ZaznamChorobAppElement;
        new (): HTMLCv1ZaznamChorobAppElement;
    };
    interface HTMLElementTagNameMap {
        "bm-ambulance-wl-editor": HTMLBmAmbulanceWlEditorElement;
        "bm-ambulance-wl-list": HTMLBmAmbulanceWlListElement;
        "cv1-zaznam-chorob-app": HTMLCv1ZaznamChorobAppElement;
    }
}
declare namespace LocalJSX {
    interface BmAmbulanceWlEditor {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "entryId"?: string;
        "onEditor-closed"?: (event: BmAmbulanceWlEditorCustomEvent<string>) => void;
    }
    interface BmAmbulanceWlList {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "onEntry-clicked"?: (event: BmAmbulanceWlListCustomEvent<string>) => void;
    }
    interface Cv1ZaznamChorobApp {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "basePath"?: string;
    }
    interface IntrinsicElements {
        "bm-ambulance-wl-editor": BmAmbulanceWlEditor;
        "bm-ambulance-wl-list": BmAmbulanceWlList;
        "cv1-zaznam-chorob-app": Cv1ZaznamChorobApp;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "bm-ambulance-wl-editor": LocalJSX.BmAmbulanceWlEditor & JSXBase.HTMLAttributes<HTMLBmAmbulanceWlEditorElement>;
            "bm-ambulance-wl-list": LocalJSX.BmAmbulanceWlList & JSXBase.HTMLAttributes<HTMLBmAmbulanceWlListElement>;
            "cv1-zaznam-chorob-app": LocalJSX.Cv1ZaznamChorobApp & JSXBase.HTMLAttributes<HTMLCv1ZaznamChorobAppElement>;
        }
    }
}
